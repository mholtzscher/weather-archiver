// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/mholtzscher/weather-archiver/internal/dal"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// GetSensors provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetSensors(ctx context.Context) ([]dal.Sensor, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSensors")
	}

	var r0 []dal.Sensor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]dal.Sensor, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []dal.Sensor); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dal.Sensor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetSensors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSensors'
type MockQuerier_GetSensors_Call struct {
	*mock.Call
}

// GetSensors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetSensors(ctx interface{}) *MockQuerier_GetSensors_Call {
	return &MockQuerier_GetSensors_Call{Call: _e.mock.On("GetSensors", ctx)}
}

func (_c *MockQuerier_GetSensors_Call) Run(run func(ctx context.Context)) *MockQuerier_GetSensors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_GetSensors_Call) Return(sensors []dal.Sensor, err error) *MockQuerier_GetSensors_Call {
	_c.Call.Return(sensors, err)
	return _c
}

func (_c *MockQuerier_GetSensors_Call) RunAndReturn(run func(ctx context.Context) ([]dal.Sensor, error)) *MockQuerier_GetSensors_Call {
	_c.Call.Return(run)
	return _c
}
