// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dal "github.com/mholtzscher/weather-archiver/internal/dal"
	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CreateDriver provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateDriver(ctx context.Context, arg dal.CreateDriverParams) (int32, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateDriver")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dal.CreateDriverParams) (int32, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dal.CreateDriverParams) int32); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dal.CreateDriverParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDriver'
type MockQuerier_CreateDriver_Call struct {
	*mock.Call
}

// CreateDriver is a helper method to define mock.On call
//   - ctx context.Context
//   - arg dal.CreateDriverParams
func (_e *MockQuerier_Expecter) CreateDriver(ctx interface{}, arg interface{}) *MockQuerier_CreateDriver_Call {
	return &MockQuerier_CreateDriver_Call{Call: _e.mock.On("CreateDriver", ctx, arg)}
}

func (_c *MockQuerier_CreateDriver_Call) Run(run func(ctx context.Context, arg dal.CreateDriverParams)) *MockQuerier_CreateDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dal.CreateDriverParams))
	})
	return _c
}

func (_c *MockQuerier_CreateDriver_Call) Return(_a0 int32, _a1 error) *MockQuerier_CreateDriver_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateDriver_Call) RunAndReturn(run func(context.Context, dal.CreateDriverParams) (int32, error)) *MockQuerier_CreateDriver_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRace provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateRace(ctx context.Context, arg dal.CreateRaceParams) (int32, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRace")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dal.CreateRaceParams) (int32, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dal.CreateRaceParams) int32); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dal.CreateRaceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateRace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRace'
type MockQuerier_CreateRace_Call struct {
	*mock.Call
}

// CreateRace is a helper method to define mock.On call
//   - ctx context.Context
//   - arg dal.CreateRaceParams
func (_e *MockQuerier_Expecter) CreateRace(ctx interface{}, arg interface{}) *MockQuerier_CreateRace_Call {
	return &MockQuerier_CreateRace_Call{Call: _e.mock.On("CreateRace", ctx, arg)}
}

func (_c *MockQuerier_CreateRace_Call) Run(run func(ctx context.Context, arg dal.CreateRaceParams)) *MockQuerier_CreateRace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dal.CreateRaceParams))
	})
	return _c
}

func (_c *MockQuerier_CreateRace_Call) Return(_a0 int32, _a1 error) *MockQuerier_CreateRace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateRace_Call) RunAndReturn(run func(context.Context, dal.CreateRaceParams) (int32, error)) *MockQuerier_CreateRace_Call {
	_c.Call.Return(run)
	return _c
}

// CreateResult provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateResult(ctx context.Context, arg dal.CreateResultParams) (int32, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateResult")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dal.CreateResultParams) (int32, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dal.CreateResultParams) int32); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dal.CreateResultParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResult'
type MockQuerier_CreateResult_Call struct {
	*mock.Call
}

// CreateResult is a helper method to define mock.On call
//   - ctx context.Context
//   - arg dal.CreateResultParams
func (_e *MockQuerier_Expecter) CreateResult(ctx interface{}, arg interface{}) *MockQuerier_CreateResult_Call {
	return &MockQuerier_CreateResult_Call{Call: _e.mock.On("CreateResult", ctx, arg)}
}

func (_c *MockQuerier_CreateResult_Call) Run(run func(ctx context.Context, arg dal.CreateResultParams)) *MockQuerier_CreateResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dal.CreateResultParams))
	})
	return _c
}

func (_c *MockQuerier_CreateResult_Call) Return(_a0 int32, _a1 error) *MockQuerier_CreateResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateResult_Call) RunAndReturn(run func(context.Context, dal.CreateResultParams) (int32, error)) *MockQuerier_CreateResult_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSeason provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateSeason(ctx context.Context, arg dal.CreateSeasonParams) (int32, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSeason")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dal.CreateSeasonParams) (int32, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dal.CreateSeasonParams) int32); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dal.CreateSeasonParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateSeason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSeason'
type MockQuerier_CreateSeason_Call struct {
	*mock.Call
}

// CreateSeason is a helper method to define mock.On call
//   - ctx context.Context
//   - arg dal.CreateSeasonParams
func (_e *MockQuerier_Expecter) CreateSeason(ctx interface{}, arg interface{}) *MockQuerier_CreateSeason_Call {
	return &MockQuerier_CreateSeason_Call{Call: _e.mock.On("CreateSeason", ctx, arg)}
}

func (_c *MockQuerier_CreateSeason_Call) Run(run func(ctx context.Context, arg dal.CreateSeasonParams)) *MockQuerier_CreateSeason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dal.CreateSeasonParams))
	})
	return _c
}

func (_c *MockQuerier_CreateSeason_Call) Return(_a0 int32, _a1 error) *MockQuerier_CreateSeason_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateSeason_Call) RunAndReturn(run func(context.Context, dal.CreateSeasonParams) (int32, error)) *MockQuerier_CreateSeason_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateTeam(ctx context.Context, arg dal.CreateTeamParams) (int32, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dal.CreateTeamParams) (int32, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dal.CreateTeamParams) int32); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dal.CreateTeamParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockQuerier_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - arg dal.CreateTeamParams
func (_e *MockQuerier_Expecter) CreateTeam(ctx interface{}, arg interface{}) *MockQuerier_CreateTeam_Call {
	return &MockQuerier_CreateTeam_Call{Call: _e.mock.On("CreateTeam", ctx, arg)}
}

func (_c *MockQuerier_CreateTeam_Call) Run(run func(ctx context.Context, arg dal.CreateTeamParams)) *MockQuerier_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dal.CreateTeamParams))
	})
	return _c
}

func (_c *MockQuerier_CreateTeam_Call) Return(_a0 int32, _a1 error) *MockQuerier_CreateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateTeam_Call) RunAndReturn(run func(context.Context, dal.CreateTeamParams) (int32, error)) *MockQuerier_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSeasons provides a mock function with given fields: ctx
func (_m *MockQuerier) GetAllSeasons(ctx context.Context) ([]dal.Season, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSeasons")
	}

	var r0 []dal.Season
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dal.Season, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dal.Season); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dal.Season)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAllSeasons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSeasons'
type MockQuerier_GetAllSeasons_Call struct {
	*mock.Call
}

// GetAllSeasons is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetAllSeasons(ctx interface{}) *MockQuerier_GetAllSeasons_Call {
	return &MockQuerier_GetAllSeasons_Call{Call: _e.mock.On("GetAllSeasons", ctx)}
}

func (_c *MockQuerier_GetAllSeasons_Call) Run(run func(ctx context.Context)) *MockQuerier_GetAllSeasons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetAllSeasons_Call) Return(_a0 []dal.Season, _a1 error) *MockQuerier_GetAllSeasons_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAllSeasons_Call) RunAndReturn(run func(context.Context) ([]dal.Season, error)) *MockQuerier_GetAllSeasons_Call {
	_c.Call.Return(run)
	return _c
}

// GetDriverById provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetDriverById(ctx context.Context, id int32) (dal.Driver, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDriverById")
	}

	var r0 dal.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (dal.Driver, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) dal.Driver); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dal.Driver)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetDriverById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDriverById'
type MockQuerier_GetDriverById_Call struct {
	*mock.Call
}

// GetDriverById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) GetDriverById(ctx interface{}, id interface{}) *MockQuerier_GetDriverById_Call {
	return &MockQuerier_GetDriverById_Call{Call: _e.mock.On("GetDriverById", ctx, id)}
}

func (_c *MockQuerier_GetDriverById_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetDriverById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetDriverById_Call) Return(_a0 dal.Driver, _a1 error) *MockQuerier_GetDriverById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetDriverById_Call) RunAndReturn(run func(context.Context, int32) (dal.Driver, error)) *MockQuerier_GetDriverById_Call {
	_c.Call.Return(run)
	return _c
}

// GetRaceById provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetRaceById(ctx context.Context, id int32) (dal.Race, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRaceById")
	}

	var r0 dal.Race
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (dal.Race, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) dal.Race); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dal.Race)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetRaceById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRaceById'
type MockQuerier_GetRaceById_Call struct {
	*mock.Call
}

// GetRaceById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) GetRaceById(ctx interface{}, id interface{}) *MockQuerier_GetRaceById_Call {
	return &MockQuerier_GetRaceById_Call{Call: _e.mock.On("GetRaceById", ctx, id)}
}

func (_c *MockQuerier_GetRaceById_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetRaceById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetRaceById_Call) Return(_a0 dal.Race, _a1 error) *MockQuerier_GetRaceById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetRaceById_Call) RunAndReturn(run func(context.Context, int32) (dal.Race, error)) *MockQuerier_GetRaceById_Call {
	_c.Call.Return(run)
	return _c
}

// GetResultById provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetResultById(ctx context.Context, id int32) (dal.Result, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetResultById")
	}

	var r0 dal.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (dal.Result, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) dal.Result); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dal.Result)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetResultById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResultById'
type MockQuerier_GetResultById_Call struct {
	*mock.Call
}

// GetResultById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) GetResultById(ctx interface{}, id interface{}) *MockQuerier_GetResultById_Call {
	return &MockQuerier_GetResultById_Call{Call: _e.mock.On("GetResultById", ctx, id)}
}

func (_c *MockQuerier_GetResultById_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetResultById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetResultById_Call) Return(_a0 dal.Result, _a1 error) *MockQuerier_GetResultById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetResultById_Call) RunAndReturn(run func(context.Context, int32) (dal.Result, error)) *MockQuerier_GetResultById_Call {
	_c.Call.Return(run)
	return _c
}

// GetResultsByRaceId provides a mock function with given fields: ctx, raceID
func (_m *MockQuerier) GetResultsByRaceId(ctx context.Context, raceID int32) ([]dal.Result, error) {
	ret := _m.Called(ctx, raceID)

	if len(ret) == 0 {
		panic("no return value specified for GetResultsByRaceId")
	}

	var r0 []dal.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]dal.Result, error)); ok {
		return rf(ctx, raceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []dal.Result); ok {
		r0 = rf(ctx, raceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dal.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, raceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetResultsByRaceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResultsByRaceId'
type MockQuerier_GetResultsByRaceId_Call struct {
	*mock.Call
}

// GetResultsByRaceId is a helper method to define mock.On call
//   - ctx context.Context
//   - raceID int32
func (_e *MockQuerier_Expecter) GetResultsByRaceId(ctx interface{}, raceID interface{}) *MockQuerier_GetResultsByRaceId_Call {
	return &MockQuerier_GetResultsByRaceId_Call{Call: _e.mock.On("GetResultsByRaceId", ctx, raceID)}
}

func (_c *MockQuerier_GetResultsByRaceId_Call) Run(run func(ctx context.Context, raceID int32)) *MockQuerier_GetResultsByRaceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetResultsByRaceId_Call) Return(_a0 []dal.Result, _a1 error) *MockQuerier_GetResultsByRaceId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetResultsByRaceId_Call) RunAndReturn(run func(context.Context, int32) ([]dal.Result, error)) *MockQuerier_GetResultsByRaceId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSeasonById provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetSeasonById(ctx context.Context, id int32) (dal.Season, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSeasonById")
	}

	var r0 dal.Season
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (dal.Season, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) dal.Season); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dal.Season)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetSeasonById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSeasonById'
type MockQuerier_GetSeasonById_Call struct {
	*mock.Call
}

// GetSeasonById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) GetSeasonById(ctx interface{}, id interface{}) *MockQuerier_GetSeasonById_Call {
	return &MockQuerier_GetSeasonById_Call{Call: _e.mock.On("GetSeasonById", ctx, id)}
}

func (_c *MockQuerier_GetSeasonById_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetSeasonById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetSeasonById_Call) Return(_a0 dal.Season, _a1 error) *MockQuerier_GetSeasonById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetSeasonById_Call) RunAndReturn(run func(context.Context, int32) (dal.Season, error)) *MockQuerier_GetSeasonById_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamById provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetTeamById(ctx context.Context, id int32) (dal.Team, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamById")
	}

	var r0 dal.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (dal.Team, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) dal.Team); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dal.Team)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamById'
type MockQuerier_GetTeamById_Call struct {
	*mock.Call
}

// GetTeamById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) GetTeamById(ctx interface{}, id interface{}) *MockQuerier_GetTeamById_Call {
	return &MockQuerier_GetTeamById_Call{Call: _e.mock.On("GetTeamById", ctx, id)}
}

func (_c *MockQuerier_GetTeamById_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetTeamById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetTeamById_Call) Return(_a0 dal.Team, _a1 error) *MockQuerier_GetTeamById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamById_Call) RunAndReturn(run func(context.Context, int32) (dal.Team, error)) *MockQuerier_GetTeamById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
