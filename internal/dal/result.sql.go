// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: result.sql

package dal

import (
	"context"
)

const createResult = `-- name: CreateResult :one
INSERT INTO result 
(race_id, driver_id, team_id, position, points)
VALUES (
$1, $2, $3, $4, $5
)
RETURNING id
`

type CreateResultParams struct {
	RaceID   int32
	DriverID int32
	TeamID   int32
	Position int32
	Points   float64
}

func (q *Queries) CreateResult(ctx context.Context, arg CreateResultParams) (int32, error) {
	row := q.db.QueryRow(ctx, createResult,
		arg.RaceID,
		arg.DriverID,
		arg.TeamID,
		arg.Position,
		arg.Points,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getResultById = `-- name: GetResultById :one
SELECT id, race_id, driver_id, team_id, position, points FROM result
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetResultById(ctx context.Context, id int32) (Result, error) {
	row := q.db.QueryRow(ctx, getResultById, id)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.RaceID,
		&i.DriverID,
		&i.TeamID,
		&i.Position,
		&i.Points,
	)
	return i, err
}

const getResultsByRaceId = `-- name: GetResultsByRaceId :many
SELECT id, race_id, driver_id, team_id, position, points FROM result
WHERE race_id = $1
ORDER BY position ASC
`

func (q *Queries) GetResultsByRaceId(ctx context.Context, raceID int32) ([]Result, error) {
	rows, err := q.db.Query(ctx, getResultsByRaceId, raceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.ID,
			&i.RaceID,
			&i.DriverID,
			&i.TeamID,
			&i.Position,
			&i.Points,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
