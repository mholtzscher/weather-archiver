// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: season.sql

package dal

import (
	"context"
)

const createSeason = `-- name: CreateSeason :one
INSERT INTO season 
(season_year, series)
VALUES (
$1, $2
)
RETURNING id
`

type CreateSeasonParams struct {
	SeasonYear int32
	Series     string
}

func (q *Queries) CreateSeason(ctx context.Context, arg CreateSeasonParams) (int32, error) {
	row := q.db.QueryRow(ctx, createSeason, arg.SeasonYear, arg.Series)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getAllSeasons = `-- name: GetAllSeasons :many
SELECT id, season_year, series FROM season
ORDER BY season_year DESC
`

func (q *Queries) GetAllSeasons(ctx context.Context) ([]Season, error) {
	rows, err := q.db.Query(ctx, getAllSeasons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Season
	for rows.Next() {
		var i Season
		if err := rows.Scan(&i.ID, &i.SeasonYear, &i.Series); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeasonById = `-- name: GetSeasonById :one
SELECT id, season_year, series FROM season
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSeasonById(ctx context.Context, id int32) (Season, error) {
	row := q.db.QueryRow(ctx, getSeasonById, id)
	var i Season
	err := row.Scan(&i.ID, &i.SeasonYear, &i.Series)
	return i, err
}
